version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "reviews:1:1"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_LOG_RETENTION_BYTES: -1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  spark-master:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - app-network

  spark-worker:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - app-network

  kafka-producer:
    build:
      context: .
      dockerfile: Dockerfile.kafka-producer
    volumes:
      - ./Data:/app/Data
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  spark-streaming:
    build:
      context: .
      dockerfile: Dockerfile.spark
    depends_on:
      - spark-master
      - kafka
      - mongo
    networks:
      - app-network
    volumes:
      - ./Models:/app/models
      - ./KafkaConsumer:/app/KafkaConsumer  # Add this to enable live code updates
    environment:
      - PYTHONUNBUFFERED=1  # This ensures Python output isn't buffered
    tty: true  # Keeps the container running and enables terminal access
    stdin_open: true  # Allows interactive shell access
    restart: unless-stopped  # Automatically restart if it crashes
    ports:
      - "4040:4040"  # Spark UI port
    healthcheck:  # Add health checking
      test: ["CMD-SHELL", "ps aux | grep spark-submit || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  visualization:
    build:
      context: .
      dockerfile: Dockerfile.visualization
    ports:
      - "5000:5000"
    depends_on:
      - mongo
    networks:
      - app-network

volumes:
  mongo-data:

networks:
  app-network:
    driver: bridge